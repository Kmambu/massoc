%!PS-Adobe-3.0
%%Title: tlm2_getting_started_4.cpp
%%For: Daniela GENIUS
%%Creator: a2ps version 4.14
%%CreationDate: Mon Dec 12 16:14:19 2016
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(// Filename: tlm2_getting_started_4.cpp) c n
() p n
(//----------------------------------------------------------------------) c n
(//  Copyright \(c\) 2007-2008 by Doulos Ltd.) N
(//) N
(//  Licensed under the Apache License, Version 2.0 \(the "License"\);) N
(//  you may not use this file except in compliance with the License.) N
(//  You may obtain a copy of the License at) N
(//) N
(//  http://www.apache.org/licenses/LICENSE-2.0) N
(//) N
(//  Unless required by applicable law or agreed to in writing, software) N
(//  distributed under the License is distributed on an "AS IS" BASIS,) N
(//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.) N
(//  See the License for the specific language governing permissions and) N
(//  limitations under the License.) N
(//----------------------------------------------------------------------) N
() p n
(// Version 2  19-June-2008 - updated for TLM-2.0) c n
() p n
() N
(// Getting Started with TLM-2.0, Example 4) c n
() p n
(// Shows the non-blocking transport interface with the generic payload and simpl) c n
(e sockets) N
(// Shows nb_transport used with the forward and backward paths) N
(// Both components are able to accept transactions on the return path,) N
(// although neither component actually uses the return path \(TLM_UPDATED\)) N
() p n
(// Shows the Approximately Timed coding style) c n
(// Models processing delay of initiator, latency of target, and request and resp) N
(onse accept delays) N
(// Uses payload event queues to manage both timing annotations and internal dela) N
(ys) N
() p n
(// Shows the BEGIN_REQ exclusion rule at the initiator and BEGIN_RESP exclusion ) c n
(rule at the target) N
(// In this example, the target allows two pipelined transactions in-flight) N
() p n
(// Shows an explicit memory manager and reference counting) c n
() p n
(// No use of temporal decoupling, DMI or debug transport) c n
(// Nominal use of the blocking transport interface just to show the simple socke) N
(t b/nb adapter) N
() p n
() N
(// Needed for the simple_target_socket) c n
(#define) K
( SC_INCLUDE_DYNAMIC_PROCESSES) p n
() N
(#include) K
( ") p
(systemc) str
(") p n
(using) K
( ) p
(namespace) K
( sc_core;) p n
(using) K
( ) p
(namespace) K
( sc_dt;) p n
(using) K
( ) p
(namespace) K
( std;) p n
() N
(#include) K
( ") p
(tlm.h) str
(") p n
(#include) K
( ") p
(tlm_utils/simple_initiator_socket.h) str
(") p n
(#include) K
( ") p
(tlm_utils/simple_target_socket.h) str
(") p n
(#include) K
( ") p
(tlm_utils/peq_with_cb_and_phase.h) str
(") p n
() N
(#define) K
( DEBUG) p n
() N
(tlm2_getting_started_4.cpp) (Page 1/10) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(static) K
( ofstream fout\(") p
(foo.txt) str
("\);) p n
() N
(// *****************************************************************************) c n
(*********) N
(// User-defined memory manager, which maintains a pool of transactions) N
(// *****************************************************************************) N
(*********) N
() p n
(class) K
( mm: ) p
(public) K
( tlm::tlm_mm_interface) p n
({) N
(  ) S
(typedef) K
( tlm::tlm_generic_payload gp_t;) p n
() N
(public) K
(:) p n
(  mm\(\) : free_list\(0\), empties\(0\)) N
(  #ifdef DEBUG) N
(  , count\(0\)) N
(  #endif) N
(  {}) N
() N
(  gp_t* allocate\(\);) N
(  ) S
(void) k
(  free\(gp_t* trans\);) p n
() N
(private) K
(:) p n
(  ) S
(struct) k
( access) p n
(  {) N
(    gp_t* trans;) N
(    access* next;) N
(    access* prev;) N
(  };) N
() N
(  access* free_list;) N
(  access* empties;) N
() N
(  #ifdef DEBUG) N
(  ) S
(int) k
(     count;) p n
(  #endif) N
(};) N
() N
(mm::gp_t* mm::allocate\(\)) N
({) N
(  #ifdef DEBUG) N
(    fout << ") S
(----------------------------- Called allocate\(\), #trans = ) str
(" << ++count << endl;) p n
(  #endif) N
(  gp_t* ptr;) N
(  ) S
(if) K
( \(free_list\)) p n
(  {) N
(    ptr = free_list->trans;) N
(    empties = free_list;) N
(    free_list = free_list->next;) N
(  }) N
(  ) S
(else) K n
(  {) p n
(    ptr = ) S
(new) K
( gp_t\() p
(this) K
(\);) p n
(  }) N
(  ) S
(return) K
( ptr;) p n
(}) N
() N
(void) k
( mm::free\(gp_t* trans\)) p n
({) N
(  #ifdef DEBUG) N
(    fout << ") S
(----------------------------- Called free\(\), #trans = ) str
(" << --count << endl;) p n
(  #endif) N
(tlm2_getting_started_4.cpp) (Page 2/10) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_4.cpp) (1/5) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(if) K
( \(!empties\)) p n
(  {) N
(    empties = ) S
(new) K
( access;) p n
(    empties->next = free_list;) N
(    empties->prev = 0;) N
(    ) S
(if) K
( \(free_list\)) p n
(      free_list->prev = empties;) N
(  }) N
(  free_list = empties;) N
(  free_list->trans = trans;) N
(  empties = free_list->prev;) N
(}) N
() N
(// Generate a random delay \(with power-law distribution\) to aid testing and stre) c n
(ss the protocol) N
(int) k
( rand_ps\(\)) p n
({) N
(  ) S
(int) k
( n = rand\(\) % 100;) p n
(  n = n * n * n;) N
(  ) S
(return) K
( n / 100;) p n
(}) N
() N
(// *****************************************************************************) c n
(*********) N
(// Initiator module generating multiple pipelined generic payload transactions) N
(// *****************************************************************************) N
(*********) N
() p n
(struct) k
( Initiator: sc_module) p n
({) N
(  ) S
(// TLM-2 socket, defaults to 32-bits wide, base protocol) c n
(  tlm_utils::simple_initiator_socket<Initiator> socket;) p n
() N
(  SC_CTOR\(Initiator\)) N
(  : socket\(") S
(socket) str
("\)  ) p
(// Construct and name socket) c n
(  , request_in_progress\(0\)) p n
(  , m_peq\() S
(this) K
(, &Initiator::peq_cb\)) p n
(  {) N
(    ) S
(// Register callbacks for incoming interface method calls) c n
(    socket.register_nb_transport_bw\() p
(this) K
(, &Initiator::nb_transport_bw\);) p n
() N
(    SC_THREAD\(thread_process\);) N
(  }) N
() N
(  ) S
(void) k
( thread_process\(\)) p n
(  {) N
(    tlm::tlm_generic_payload* trans;) N
(    tlm::tlm_phase phase;) N
(    sc_time delay;) N
() N
(    ) S
(// Generate a sequence of random transactions) c n
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < 1000; i++\)) p n
(    {) N
(      ) S
(int) k
( adr = rand\(\);) p n
(      tlm::tlm_command cmd = ) S
(static_cast) k
(<tlm::tlm_command>\(rand\(\) % 2\);) p n
(      ) S
(if) K
( \(cmd == tlm::TLM_WRITE_COMMAND\) data[i % 16] = rand\(\);) p n
() N
(      ) S
(// Grab a new transaction from the memory manager) c n
(      trans = m_mm.allocate\(\);) p n
(      trans->acquire\(\);) N
() N
(      ) S
(// Set all attributes except byte_enable_length and extensions \(unused\)) c n
(tlm2_getting_started_4.cpp) (Page 3/10) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      trans->set_command\( cmd \);) p n
(      trans->set_address\( adr \);) N
(      trans->set_data_ptr\( ) S
(reinterpret_cast) k
(<) p
(unsigned) k
( ) p
(char) k
(*>\(&data[i % 16]\) \);) p n
(      trans->set_data_length\( 4 \);) N
(      trans->set_streaming_width\( 4 \); ) S
(// = data_length to indicate no streaming) c n
(      trans->set_byte_enable_ptr\( 0 \); ) p
(// 0 indicates unused) c n
(      trans->set_dmi_allowed\( ) p
(false) k
( \); ) p
(// Mandatory initial value) c n
(      trans->set_response_status\( tlm::TLM_INCOMPLETE_RESPONSE \); ) p
(// Mandatory i) c n
(nitial value) N
() p n
(      ) S
(// Initiator must honor BEGIN_REQ/END_REQ exclusion rule) c n
(      ) p
(if) K
( \(request_in_progress\)) p n
(        wait\(end_request_event\);) N
(      request_in_progress = trans;) N
(      phase = tlm::BEGIN_REQ;) N
() N
(      ) S
(// Timing annotation models processing time of initiator prior to call) c n
(      delay = sc_time\(rand_ps\(\), SC_PS\);) p n
() N
(      fout << hex << adr << ") S
( new, cmd=) str
(" << \(cmd ? ') p
(W) str
(' : ') p
(R) str
('\)) p n
(           << ") S
(, data=) str
(" << hex << data[i % 16] << ") p
( at time ) str
(" << sc_time_stamp\(\) << en) p n
(dl;) N
() N
(      ) S
(// Non-blocking transport call on the forward path) c n
(      tlm::tlm_sync_enum status;) p n
(      status = socket->nb_transport_fw\( *trans, phase, delay \);) N
() N
(      ) S
(// Check value returned from nb_transport_fw) c n
(      ) p
(if) K
( \(status == tlm::TLM_UPDATED\)) p n
(      {) N
(        ) S
(// The timing annotation must be honored) c n
(        m_peq.notify\( *trans, phase, delay \);) p n
(      }) N
(      ) S
(else) K
( ) p
(if) K
( \(status == tlm::TLM_COMPLETED\)) p n
(      {) N
(        ) S
(// The completion of the transaction necessarily ends the BEGIN_REQ phas) c n
(e) N
(        request_in_progress = 0;) p n
() N
(        ) S
(// The target has terminated the transaction) c n
(        check_transaction\( *trans \);) p n
(      }) N
(      wait\( sc_time\(rand_ps\(\), SC_PS\) \);) N
(    }) N
() N
(    wait\(100, SC_NS\);) N
() N
(    ) S
(// Allocate a transaction for one final, nominal call to b_transport) c n
(    trans = m_mm.allocate\(\);) p n
(    trans->acquire\(\);) N
(    trans->set_command\( tlm::TLM_WRITE_COMMAND \);) N
(    trans->set_address\( 0 \);) N
(    trans->set_data_ptr\( ) S
(reinterpret_cast) k
(<) p
(unsigned) k
( ) p
(char) k
(*>\(&data[0]\) \);) p n
(    trans->set_data_length\( 4 \);) N
(    trans->set_streaming_width\( 4 \); ) S
(// = data_length to indicate no streaming) c n
(    trans->set_byte_enable_ptr\( 0 \); ) p
(// 0 indicates unused) c n
(    trans->set_dmi_allowed\( ) p
(false) k
( \); ) p
(// Mandatory initial value) c n
(    trans->set_response_status\( tlm::TLM_INCOMPLETE_RESPONSE \); ) p
(// Mandatory ini) c n
(tial value) N
() p n
(    delay = sc_time\(rand_ps\(\), SC_PS\);) N
() N
(tlm2_getting_started_4.cpp) (Page 4/10) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_4.cpp) (2/5) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    fout << ") p
(Calling b_transport at ) str
(" << sc_time_stamp\(\) << ") p
( with delay = ) str
(" << delay << end) p n
(l;) N
() N
(    ) S
(// Call b_transport to demonstrate the b/nb conversion by the simple_target_) c n
(socket) N
(    socket->b_transport\( *trans, delay \);) p n
(    check_transaction\( *trans \);) N
(  }) N
() N
(  ) S
(// TLM-2 backward non-blocking transport method) c n
() p n
(  ) S
(virtual) K
( tlm::tlm_sync_enum nb_transport_bw\( tlm::tlm_generic_payload& trans,) p n
(                                              tlm::tlm_phase& phase, sc_time& de) N
(lay \)) N
(  {) N
(    ) S
(// The timing annotation must be honored) c n
(    m_peq.notify\( trans, phase, delay \);) p n
(    ) S
(return) K
( tlm::TLM_ACCEPTED;) p n
(  }) N
() N
(  ) S
(// Payload event queue callback to handle transactions from target) c n
(  ) p
(// Transaction could have arrived through return path or backward path) c n
() p n
(  ) S
(void) k
( peq_cb\(tlm::tlm_generic_payload& trans, ) p
(const) K
( tlm::tlm_phase& phase\)) p n
(  {) N
(    #ifdef DEBUG) N
(      ) S
(if) K
( \(phase == tlm::END_REQ\)) p n
(        fout << hex << trans.get_address\(\) << ") S
( END_REQ at ) str
(" << sc_time_stamp\(\) <) p n
(< endl;) N
(      ) S
(else) K
( ) p
(if) K
( \(phase == tlm::BEGIN_RESP\)) p n
(        fout << hex << trans.get_address\(\) << ") S
( BEGIN_RESP at ) str
(" << sc_time_stamp\(\)) p n
( << endl;) N
(    #endif) N
() N
(    ) S
(if) K
( \(phase == tlm::END_REQ || \(&trans == request_in_progress && phase == tlm:) p n
(:BEGIN_RESP\)\)) N
(    {) N
(      ) S
(// The end of the BEGIN_REQ phase) c n
(      request_in_progress = 0;) p n
(      end_request_event.notify\(\);) N
(    }) N
(    ) S
(else) K
( ) p
(if) K
( \(phase == tlm::BEGIN_REQ || phase == tlm::END_RESP\)) p n
(      SC_REPORT_FATAL\(") S
(TLM-2) str
(", ") p
(Illegal transaction phase received by initiator) str
("\);) p n
() N
(    ) S
(if) K
( \(phase == tlm::BEGIN_RESP\)) p n
(    {) N
(      check_transaction\( trans \);) N
() N
(      ) S
(// Send final phase transition to target) c n
(      tlm::tlm_phase fw_phase = tlm::END_RESP;) p n
(      sc_time delay = sc_time\(rand_ps\(\), SC_PS\);) N
(      socket->nb_transport_fw\( trans, fw_phase, delay \);) N
(      ) S
(// Ignore return value) c n
(    }) p n
(  }) N
() N
(  ) S
(// Called on receiving BEGIN_RESP or TLM_COMPLETED) c n
(  ) p
(void) k
( check_transaction\(tlm::tlm_generic_payload& trans\)) p n
(  {) N
(    ) S
(if) K
( \( trans.is_response_error\(\) \)) p n
(    {) N
(      ) S
(char) k
( txt[100];) p n
(tlm2_getting_started_4.cpp) (Page 5/10) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      sprintf\(txt, ") p
(Transaction returned with error, response status = %s) str
(",) p n
(                   trans.get_response_string\(\).c_str\(\)\);) N
(      SC_REPORT_ERROR\(") S
(TLM-2) str
(", txt\);) p n
(    }) N
() N
(    tlm::tlm_command cmd = trans.get_command\(\);) N
(    sc_dt::uint64    adr = trans.get_address\(\);) N
(    ) S
(int) k
(*             ptr = ) p
(reinterpret_cast) k
(<) p
(int) k
(*>\( trans.get_data_ptr\(\) \);) p n
() N
(    fout<< hex << adr << ") S
( check, cmd=) str
(" << \(cmd ? ') p
(W) str
(' : ') p
(R) str
('\)) p n
(         << ") S
(, data=) str
(" << hex << *ptr << ") p
( at time ) str
(" << sc_time_stamp\(\) << endl;) p n
() N
(    ) S
(// Allow the memory manager to free the transaction object) c n
(    trans.release\(\);) p n
(  }) N
() N
(  mm   m_mm;) N
(  ) S
(int) k
(  data[16];) p n
(  tlm::tlm_generic_payload* request_in_progress;) N
(  sc_event end_request_event;) N
(  tlm_utils::peq_with_cb_and_phase<Initiator> m_peq;) N
(};) N
() N
() N
(// *****************************************************************************) c n
(*********) N
(// Target module able to handle two pipelined transactions) N
(// *****************************************************************************) N
(*********) N
() p n
(DECLARE_EXTENDED_PHASE\(internal_ph\);) N
() N
(struct) k
( Target: sc_module) p n
({) N
(  ) S
(// TLM-2 socket, defaults to 32-bits wide, base protocol) c n
(  tlm_utils::simple_target_socket<Target> socket;) p n
() N
(  SC_CTOR\(Target\)) N
(  : socket\(") S
(socket) str
("\)) p n
(  , n_trans\(0\)) N
(  , response_in_progress\() S
(false) k
(\)) p n
(  , next_response_pending\(0\)) N
(  , end_req_pending\(0\)) N
(  , m_peq\() S
(this) K
(, &Target::peq_cb\)) p n
(  {) N
(    ) S
(// Register callbacks for incoming interface method calls) c n
(    socket.register_nb_transport_fw\() p
(this) K
(, &Target::nb_transport_fw\);) p n
(  }) N
() N
(  ) S
(// TLM-2 non-blocking transport method) c n
() p n
(  ) S
(virtual) K
( tlm::tlm_sync_enum nb_transport_fw\( tlm::tlm_generic_payload& trans,) p n
(                                              tlm::tlm_phase& phase, sc_time& de) N
(lay \)) N
(  {) N
(    sc_dt::uint64    adr = trans.get_address\(\);) N
(    ) S
(unsigned) k
( ) p
(int) k
(     len = trans.get_data_length\(\);) p n
(    ) S
(unsigned) k
( ) p
(char) k
(*   byt = trans.get_byte_enable_ptr\(\);) p n
(    ) S
(unsigned) k
( ) p
(int) k
(     wid = trans.get_streaming_width\(\);) p n
() N
(    ) S
(// Obliged to check the transaction attributes for unsupported features) c n
(    ) p
(// and to generate the appropriate error response) c n
(tlm2_getting_started_4.cpp) (Page 6/10) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_4.cpp) (3/5) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(if) K
( \(byt != 0\) {) p n
(      trans.set_response_status\( tlm::TLM_BYTE_ENABLE_ERROR_RESPONSE \);) N
(      ) S
(return) K
( tlm::TLM_COMPLETED;) p n
(    }) N
(    ) S
(if) K
( \(len > 4 || wid < len\) {) p n
(      trans.set_response_status\( tlm::TLM_BURST_ERROR_RESPONSE \);) N
(      ) S
(return) K
( tlm::TLM_COMPLETED;) p n
(    }) N
() N
(    ) S
(// Now queue the transaction until the annotated time has elapsed) c n
(    m_peq.notify\( trans, phase, delay\);) p n
(    ) S
(return) K
( tlm::TLM_ACCEPTED;) p n
(  }) N
() N
(  ) S
(void) k
( peq_cb\(tlm::tlm_generic_payload& trans, ) p
(const) K
( tlm::tlm_phase& phase\)) p n
(  {) N
(    tlm::tlm_sync_enum status;) N
(    sc_time delay;) N
() N
(    ) S
(switch) K
( \(phase\) {) p n
(    ) S
(case) K
( tlm::BEGIN_REQ:) p n
() N
(      #ifdef DEBUG) N
(        fout << hex << trans.get_address\(\) << ") S
( BEGIN_REQ at ) str
(" << sc_time_stamp\(\) ) p n
(<< endl;) N
(      #endif) N
() N
(      ) S
(// Increment the transaction reference count) c n
(      trans.acquire\(\);) p n
() N
(      ) S
(// Put back-pressure on initiator by deferring END_REQ until pipeline is c) c n
(lear) N
(      ) p
(if) K
( \(n_trans == 2\)) p n
(        end_req_pending = &trans;) N
(      ) S
(else) K n
(      {) p n
(        status = send_end_req\(trans\);) N
(        ) S
(if) K
( \(status == tlm::TLM_COMPLETED\) ) p
(// It is questionable whether this is ) c n
(valid) N
(          ) p
(break) K
(;) p n
(      }) N
() N
(      ) S
(break) K
(;) p n
() N
(    ) S
(case) K
( tlm::END_RESP:) p n
(      ) S
(// On receiving END_RESP, the target can release the transaction) c n
(      ) p
(// and allow other pending transactions to proceed) c n
() p n
(      #ifdef DEBUG) N
(        fout << hex << trans.get_address\(\) << ") S
( END_RESP at ) str
(" << sc_time_stamp\(\) <) p n
(< endl;) N
(      #endif) N
() N
(      ) S
(if) K
( \(!response_in_progress\)) p n
(        SC_REPORT_FATAL\(") S
(TLM-2) str
(", ") p
(Illegal transaction phase END_RESP received by target) str
("\);) p n
() N
(      trans.release\(\);) N
(      n_trans--;) N
() N
(      ) S
(// Target itself is now clear to issue the next BEGIN_RESP) c n
(      response_in_progress = ) p
(false) k
(;) p n
(      ) S
(if) K
( \(next_response_pending\)) p n
(tlm2_getting_started_4.cpp) (Page 7/10) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      {) p n
(        send_response\( *next_response_pending \);) N
(        next_response_pending = 0;) N
(      }) N
() N
(      ) S
(// ... and to unblock the initiator by issuing END_REQ) c n
(      ) p
(if) K
( \(end_req_pending\)) p n
(      {) N
(        status = send_end_req\( *end_req_pending \);) N
(        end_req_pending = 0;) N
(      }) N
() N
(      ) S
(break) K
(;) p n
() N
(    ) S
(case) K
( tlm::END_REQ:) p n
(    ) S
(case) K
( tlm::BEGIN_RESP:) p n
(      SC_REPORT_FATAL\(") S
(TLM-2) str
(", ") p
(Illegal transaction phase received by target) str
("\);) p n
(      ) S
(break) K
(;) p n
() N
(    ) S
(default) K
(:) p n
(      ) S
(if) K
( \(phase == internal_ph\)) p n
(      {) N
(        ) S
(// Execute the read or write commands) c n
() p n
(        tlm::tlm_command cmd = trans.get_command\(\);) N
(        sc_dt::uint64    adr = trans.get_address\(\);) N
(        ) S
(unsigned) k
( ) p
(char) k
(*   ptr = trans.get_data_ptr\(\);) p n
(        ) S
(unsigned) k
( ) p
(int) k
(     len = trans.get_data_length\(\);) p n
() N
(        ) S
(if) K
( \( cmd == tlm::TLM_READ_COMMAND \)) p n
(        {) N
(          *) S
(reinterpret_cast) k
(<) p
(int) k
(*>\(ptr\) = rand\(\);) p n
(          fout << hex << adr << ") S
( Execute READ, data = ) str
(" << *) p
(reinterpret_cast) k
(<) p
(int) k
(*>\(p) p n
(tr\) << endl;) N
(        }) N
(        ) S
(else) K
( ) p
(if) K
( \( cmd == tlm::TLM_WRITE_COMMAND \)) p n
(          fout << hex << adr << ") S
( Execute WRITE, data = ) str
(" << *) p
(reinterpret_cast) k
(<) p
(int) k
(*>\(p) p n
(tr\) << endl;) N
() N
(        trans.set_response_status\( tlm::TLM_OK_RESPONSE \);) N
() N
(        ) S
(// Target must honor BEGIN_RESP/END_RESP exclusion rule) c n
(        ) p
(// i.e. must not send BEGIN_RESP until receiving previous END_RESP or BE) c n
(GIN_REQ) N
(        ) p
(if) K
( \(response_in_progress\)) p n
(        {) N
(          ) S
(// Target allows only two transactions in-flight) c n
(          ) p
(if) K
( \(next_response_pending\)) p n
(            SC_REPORT_FATAL\(") S
(TLM-2) str
(", ") p
(Attempt to have two pending responses in target) str
("\);) p n
(          next_response_pending = &trans;) N
(        }) N
(        ) S
(else) K n
(          send_response\(trans\);) p n
(        ) S
(break) K
(;) p n
(      }) N
(    }) N
(  }) N
() N
(  tlm::tlm_sync_enum send_end_req\(tlm::tlm_generic_payload& trans\)) N
(  {) N
(    tlm::tlm_sync_enum status;) N
(    tlm::tlm_phase bw_phase;) N
(tlm2_getting_started_4.cpp) (Page 8/10) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_4.cpp) (4/5) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    tlm::tlm_phase int_phase = internal_ph;) p n
(    sc_time delay;) N
() N
(    ) S
(// Queue the acceptance and the response with the appropriate latency) c n
(    bw_phase = tlm::END_REQ;) p n
(    delay = sc_time\(rand_ps\(\), SC_PS\); ) S
(// Accept delay) c n
(    status = socket->nb_transport_bw\( trans, bw_phase, delay \);) p n
(    ) S
(if) K
( \(status == tlm::TLM_COMPLETED\)) p n
(    {) N
(      ) S
(// Transaction aborted by the initiator) c n
(      ) p
(// \(TLM_UPDATED cannot occur at this point in the base protocol, so need n) c n
(ot be checked\)) N
(      trans.release\(\);) p n
(      ) S
(return) K
( status;) p n
(    }) N
() N
(    ) S
(// Queue internal event to mark beginning of response) c n
(    delay = delay + sc_time\(rand_ps\(\), SC_PS\); ) p
(// Latency) c n
(    m_peq.notify\( trans, int_phase, delay \);) p n
(    n_trans++;) N
() N
(    ) S
(return) K
( status;) p n
(  }) N
() N
(  ) S
(void) k
( send_response\(tlm::tlm_generic_payload& trans\)) p n
(  {) N
(    tlm::tlm_sync_enum status;) N
(    tlm::tlm_phase bw_phase;) N
(    sc_time delay;) N
() N
(    response_in_progress = ) S
(true) k
(;) p n
(    bw_phase = tlm::BEGIN_RESP;) N
(    delay = SC_ZERO_TIME;) N
(    status = socket->nb_transport_bw\( trans, bw_phase, delay \);) N
() N
(    ) S
(if) K
( \(status == tlm::TLM_UPDATED\)) p n
(    {) N
(      ) S
(// The timing annotation must be honored) c n
(      m_peq.notify\( trans, bw_phase, delay\);) p n
(    }) N
(    ) S
(else) K
( ) p
(if) K
( \(status == tlm::TLM_COMPLETED\)) p n
(    {) N
(      ) S
(// The initiator has terminated the transaction) c n
(      trans.release\(\);) p n
(      n_trans--;) N
(      response_in_progress = ) S
(false) k
(;) p n
(    }) N
(  }) N
() N
(  ) S
(int) k
(   n_trans;) p n
(  ) S
(bool) k
(  response_in_progress;) p n
(  tlm::tlm_generic_payload*  next_response_pending;) N
(  tlm::tlm_generic_payload*  end_req_pending;) N
(  tlm_utils::peq_with_cb_and_phase<Target> m_peq;) N
(};) N
() N
() N
(SC_MODULE\(Top\)) N
({) N
(  Initiator *initiator;) N
(  Target    *target;) N
() N
(tlm2_getting_started_4.cpp) (Page 9/10) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  SC_CTOR\(Top\)) p n
(  {) N
(    ) S
(// Instantiate components) c n
(    initiator = ) p
(new) K
( Initiator\(") p
(initiator) str
("\);) p n
(    target    = ) S
(new) K
( Target   \(") p
(target) str
("\);) p n
() N
(    ) S
(// One initiator is bound directly to one target with no intervening bus) c n
() p n
(    ) S
(// Bind initiator socket to target socket) c n
(    initiator->socket.bind\(target->socket\);) p n
(  }) N
(};) N
() N
() N
(int) k
( sc_main\() p
(int) k
( argc, ) p
(char) k
(* argv[]\)) p n
({) N
(  Top top\(") S
(top) str
("\);) p n
(  sc_start\(\);) N
(  ) S
(return) K
( 0;) p n
(}) N
() N
(tlm2_getting_started_4.cpp) (Page 10/10) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_4.cpp) (5/5) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
