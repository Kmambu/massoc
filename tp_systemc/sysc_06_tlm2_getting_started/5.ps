%!PS-Adobe-3.0
%%Title: tlm2_getting_started_5.cpp
%%For: Daniela GENIUS
%%Creator: a2ps version 4.14
%%CreationDate: Mon Dec 12 16:14:24 2016
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(// Filename: tlm2_getting_started_5.cpp) c n
() p n
(//----------------------------------------------------------------------) c n
(//  Copyright \(c\) 2007-2008 by Doulos Ltd.) N
(//) N
(//  Licensed under the Apache License, Version 2.0 \(the "License"\);) N
(//  you may not use this file except in compliance with the License.) N
(//  You may obtain a copy of the License at) N
(//) N
(//  http://www.apache.org/licenses/LICENSE-2.0) N
(//) N
(//  Unless required by applicable law or agreed to in writing, software) N
(//  distributed under the License is distributed on an "AS IS" BASIS,) N
(//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.) N
(//  See the License for the specific language governing permissions and) N
(//  limitations under the License.) N
(//----------------------------------------------------------------------) N
() p n
(// Version 1, 26-June-2008) c n
(// Version 2,  3-July-2008 - fix bug: call dmi_data.init\(\)) N
(// Version 3  12-Jan-2009  - fix bug in transport_dbg) N
(// Version 4  26-Sep-2009  - fix bug with set_end_address) N
() p n
() N
(// Getting Started with TLM-2.0, Example 5) c n
() p n
(// Shows two loosely-timed initiators both with temporal decoupling and quantum ) c n
(keeper) N
() p n
(// Shows a bus with multiple initiators and multiple targets \(four memories\)) c n
(// Routes transactions to target and back using address decoding built into the ) N
(bus) N
(// Uses tagged interfaces and sockets to implement multiple fw/bw interfaces in ) N
(a single module) N
(// Propagates DMI calls on both forward and backward paths,) N
(// with 'invalidate' being broadcast to every initiator) N
() p n
(// Shows transaction pooling using a memory manager) c n
() p n
() N
(#define) K
( SC_INCLUDE_DYNAMIC_PROCESSES) p n
() N
(#include) K
( ") p
(tlm_utils/simple_initiator_socket.h) str
(") p n
(#include) K
( ") p
(tlm_utils/simple_target_socket.h) str
(") p n
(#include) K
( ") p
(tlm_utils/tlm_quantumkeeper.h) str
(") p n
() N
(using) K
( ) p
(namespace) K
( sc_core;) p n
(using) K
( ) p
(namespace) K
( std;) p n
() N
() N
(// *****************************************************************************) c n
(*********) N
(// User-defined memory manager, which maintains a pool of transactions) N
(// *****************************************************************************) N
(*********) N
() p n
(class) K
( mm: ) p
(public) K
( tlm::tlm_mm_interface) p n
({) N
(  ) S
(typedef) K
( tlm::tlm_generic_payload gp_t;) p n
() N
(public) K
(:) p n
(tlm2_getting_started_5.cpp) (Page 1/12) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  mm\(\) : free_list\(0\), empties\(0\) {}) p n
() N
(  gp_t* allocate\(\);) N
(  ) S
(void) k
(  free\(gp_t* trans\);) p n
() N
(private) K
(:) p n
(  ) S
(struct) k
( access) p n
(  {) N
(    gp_t* trans;) N
(    access* next;) N
(    access* prev;) N
(  };) N
() N
(  access* free_list;) N
(  access* empties;) N
() N
(};) N
() N
(mm::gp_t* mm::allocate\(\)) N
({) N
(  gp_t* ptr;) N
(  ) S
(if) K
( \(free_list\)) p n
(  {) N
(    ptr = free_list->trans;) N
(    empties = free_list;) N
(    free_list = free_list->next;) N
(  }) N
(  ) S
(else) K n
(  {) p n
(    ptr = ) S
(new) K
( gp_t\() p
(this) K
(\);) p n
(  }) N
(  ) S
(return) K
( ptr;) p n
(}) N
() N
(void) k
( mm::free\(gp_t* trans\)) p n
({) N
(  ) S
(if) K
( \(!empties\)) p n
(  {) N
(    empties = ) S
(new) K
( access;) p n
(    empties->next = free_list;) N
(    empties->prev = 0;) N
(    ) S
(if) K
( \(free_list\)) p n
(      free_list->prev = empties;) N
(  }) N
(  free_list = empties;) N
(  free_list->trans = trans;) N
(  empties = free_list->prev;) N
(}) N
() N
() N
(// *****************************************************************************) c n
(************) N
(// Initiator1 writes to all 4 memories, and demonstrates DMI and debug transport) N
(// Does not use an explicit memory manager) N
(// *****************************************************************************) N
(************) N
() p n
(const) K
( ) p
(int) k
( RUN_LENGTH = 256;) p n
() N
(struct) k
( Initiator1: sc_module) p n
({) N
(  tlm_utils::simple_initiator_socket<Initiator1> socket;) N
(tlm2_getting_started_5.cpp) (Page 2/12) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_5.cpp) (1/6) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  SC_CTOR\(Initiator1\) : socket\(") S
(socket) str
("\), dmi_ptr_valid\() p
(false) k
(\)) p n
(  {) N
(    socket.register_invalidate_direct_mem_ptr\() S
(this) K
(, &Initiator1::invalidate_dire) p n
(ct_mem_ptr\);) N
() N
(    SC_THREAD\(thread_process\);) N
() N
(    ) S
(// *************************************************************************) c n
(    ) p
(// All initiators use a quantum of 1us, that is, they synchronize themselves) c n
(    ) p
(// to simulation time every 1us using the quantum keeper) c n
(    ) p
(// *************************************************************************) c n
() p n
(    m_qk.set_global_quantum\( sc_time\(1, SC_US\) \);) N
(    m_qk.reset\(\);) N
(  }) N
() N
(  ) S
(void) k
( thread_process\(\) {) p n
(    ) S
(// Use debug transaction interface to dump entire memory contents) c n
(    dump\(\);) p n
() N
(    tlm::tlm_generic_payload* trans = ) S
(new) K
( tlm::tlm_generic_payload;) p n
(    sc_time delay;) N
() N
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < RUN_LENGTH; i += 4\)) p n
(    {) N
(      data = i;) N
(      delay = m_qk.get_local_time\(\);) N
() N
(      ) S
(if) K
( \(dmi_ptr_valid && sc_dt::uint64\(i\) >= dmi_data.get_start_address\(\)) p n
(                        && sc_dt::uint64\(i\) <= dmi_data.get_end_address\(\)\)) N
(      {) N
(        ) S
(// Bypass transport interface and use direct memory interface) c n
(        assert\( dmi_data.is_write_allowed\(\) \);) p n
(        memcpy\(dmi_data.get_dmi_ptr\(\) + i - dmi_data.get_start_address\(\), &data,) N
( 4\);) N
() N
(        ) S
(// Accumulate memory latency into local time) c n
(        delay += dmi_data.get_write_latency\(\);) p n
() N
(        cout << ") S
(WRITE/DMI addr = ) str
(" << hex << i << ") p
(, data = ) str
(" << data) p n
(             << ") S
( at ) str
(" << sc_time_stamp\(\) << ") p
( delay = ) str
(" << delay << ") p
(\\n) str
(";) p n
(      }) N
(      ) S
(else) K n
(      {) p n
(        ) S
(// No DMI, so use blocking transport interface) c n
(        trans->set_command\( tlm::TLM_WRITE_COMMAND \);) p n
(        trans->set_address\( i \);) N
(        trans->set_data_ptr\( ) S
(reinterpret_cast) k
(<) p
(unsigned) k
( ) p
(char) k
(*>\(&data\) \);) p n
(        trans->set_data_length\( 4 \);) N
(        trans->set_streaming_width\( 4 \); ) S
(// = data_length to indicate no streami) c n
(ng) N
(        trans->set_byte_enable_ptr\( 0 \); ) p
(// 0 indicates unused) c n
(        trans->set_dmi_allowed\( ) p
(false) k
( \); ) p
(// Mandatory initial value) c n
(        trans->set_response_status\( tlm::TLM_INCOMPLETE_RESPONSE \); ) p
(// Mandatory) c n
( initial value) N
() p n
(        socket->b_transport\( *trans, delay \);) N
() N
(        cout << ") S
(WRITE     addr = ) str
(" << hex << i << ") p
(, data = ) str
(" << data) p n
(             << ") S
( at ) str
(" << sc_time_stamp\(\) << ") p
( delay = ) str
(" << delay << ") p
(\\n) str
(";) p n
() N
(tlm2_getting_started_5.cpp) (Page 3/12) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(// Initiator obliged to check response status) c n
(        ) p
(if) K
( \(trans->is_response_error\(\)\)) p n
(          SC_REPORT_ERROR\(") S
(TLM-2) str
(", trans->get_response_string\(\).c_str\(\)\);) p n
() N
(        ) S
(if) K
( \( trans->is_dmi_allowed\(\) \)) p n
(        {) N
(          dmi_data.init\(\);) N
(          dmi_ptr_valid = socket->get_direct_mem_ptr\( *trans, dmi_data \);) N
(        }) N
(      }) N
() N
(      ) S
(// Accumulate local time and synchronize when quantum is reached) c n
(      m_qk.set\( delay \);) p n
(      m_qk.inc\( sc_time\(100, SC_NS\) \); ) S
(// Model time used for additional process) c n
(ing) N
(      ) p
(if) K
( \(m_qk.need_sync\(\)\) m_qk.sync\(\);) p n
(    }) N
() N
(    ) S
(// Use debug transaction interface to dump entire memory contents) c n
(    dump\(\);) p n
(  }) N
() N
() N
(  ) S
(virtual) K
( ) p
(void) k
( invalidate_direct_mem_ptr\(sc_dt::uint64 start_range, sc_dt::uint6) p n
(4 end_range\)) N
(  {) N
(    cout << ") S
(INVALIDATE DMI \() str
(" << start_range << ") p
(..) str
(" << end_range) p n
(         << ") S
(\) for Initiator1 at ) str
(" << sc_time_stamp\(\) << ") p
(\\n) str
(";) p n
() N
(    ) S
(// Ignore range and invalidate all DMI pointers regardless) c n
(    dmi_ptr_valid = ) p
(false) k
(;) p n
(  }) N
() N
(  ) S
(void) k
( dump\(\)) p n
(  {) N
(  ) S
(unsigned) k
( ) p
(char) k
( buffer[64];) p n
(    ) S
(// Use debug transaction interface to dump memory contents) c n
() p n
(    cout << ") S
(\\nDump memories at time ) str
(" << sc_time_stamp\(\) << ") p
(\\n) str
(";) p n
() N
(    ) S
(for) K
( \() p
(unsigned) k
( ) p
(int) k
( k = 0; k < 4; k++\)) p n
(    {) N
(      tlm::tlm_generic_payload dbg;) N
(      sc_dt::uint64 A = 64 * k;) N
(      dbg.set_address\(A\);) N
(      dbg.set_read\(\);) N
(      dbg.set_data_length\(64\);) N
(      dbg.set_data_ptr\(buffer\);) N
() N
(      ) S
(unsigned) k
( ) p
(int) k
( n_bytes = socket->transport_dbg\( dbg \);) p n
() N
(      ) S
(for) K
( \() p
(unsigned) k
( ) p
(int) k
( i = 0; i < n_bytes; i += 4\)) p n
(      {) N
(        cout << ") S
(mem[) str
(" << hex << \(A + i\) << ") p
(] = ) str
(") p n
(             << *\() S
(reinterpret_cast) k
(<) p
(unsigned) k
( ) p
(int) k
(*>\( &buffer[i] \)\) << endl;) p n
(      }) N
(    }) N
(    cout << ") S
(\\n) str
(";) p n
(  }) N
() N
(  ) S
(int) k
( data; ) p
(// Internal data buffer used by initiator with generic payload) c n
(  tlm_utils::tlm_quantumkeeper m_qk; ) p
(// Quantum keeper for temporal decoupling) c n
(tlm2_getting_started_5.cpp) (Page 4/12) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_5.cpp) (2/6) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(bool) k
( dmi_ptr_valid;) p n
(  tlm::tlm_dmi dmi_data;) N
(};) N
() N
() N
(// *****************************************************************************) c n
(************) N
(// Initiator2 reads from all 4 memories, but does not use DMI or debug transport) N
(// Uses an explicit memory manager and transaction pool) N
(// *****************************************************************************) N
(************) N
() p n
(struct) k
( Initiator2: sc_module) p n
({) N
(  tlm_utils::simple_initiator_socket<Initiator2> socket;) N
() N
(  SC_CTOR\(Initiator2\) : socket\(") S
(socket) str
("\)) p n
(  {) N
(    ) S
(// No callback methods registered with socket) c n
() p n
(    SC_THREAD\(thread_process\);) N
(  }) N
() N
(  ) S
(void) k
( thread_process\(\)) p n
(  {) N
(    tlm::tlm_generic_payload* trans;) N
(    sc_time delay;) N
() N
(    ) S
(// Reset the local quantum keeper) c n
(    m_qk.reset\(\);) p n
(    wait\(1, SC_US\);) N
() N
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < RUN_LENGTH; i += 4\)) p n
(    {) N
(      ) S
(// Grab a new transaction from the memory manager) c n
(      trans = m_mm.allocate\(\);) p n
(      trans->acquire\(\);) N
() N
(      data = i;) N
() N
(      trans->set_command\( tlm::TLM_READ_COMMAND \);) N
(      trans->set_address\( i \);) N
(      trans->set_data_ptr\( ) S
(reinterpret_cast) k
(<) p
(unsigned) k
( ) p
(char) k
(*>\(&data\) \);) p n
(      trans->set_data_length\( 4 \);) N
(      trans->set_streaming_width\( 4 \); ) S
(// = data_length to indicate no streaming) c n
(      trans->set_byte_enable_ptr\( 0 \); ) p
(// 0 indicates unused) c n
(      trans->set_dmi_allowed\( ) p
(false) k
( \); ) p
(// Mandatory initial value) c n
(      trans->set_response_status\( tlm::TLM_INCOMPLETE_RESPONSE \); ) p
(// Mandatory i) c n
(nitial value) N
() p n
(      delay = m_qk.get_local_time\(\);) N
() N
(      socket->b_transport\( *trans, delay \);) N
() N
(      ) S
(// Initiator obliged to check response status) c n
(      ) p
(if) K
( \(trans->is_response_error\(\)\)) p n
(        SC_REPORT_ERROR\(") S
(TLM-2) str
(", trans->get_response_string\(\).c_str\(\)\);) p n
(      ) S
(if) K
( \(data != i\)) p n
(        SC_REPORT_ERROR\(") S
(TLM-2) str
(", ") p
(Mismatch in initiator when reading back data) str
("\);) p n
() N
(      cout << ") S
(READ     addr = ) str
(" << hex << i << ") p
(, data = ) str
(" << data) p n
(           << ") S
( at ) str
(" << sc_time_stamp\(\) << ") p
( delay = ) str
(" << delay << ") p
(\\n) str
(";) p n
(tlm2_getting_started_5.cpp) (Page 5/12) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      trans->release\(\);) p n
() N
(      ) S
(// Accumulate local time and synchronize when quantum is reached) c n
(      m_qk.set\( delay \);) p n
(      m_qk.inc\( sc_time\(100, SC_NS\) \);) S
(// Model time used for additional processi) c n
(ng) N
(      ) p
(if) K
( \(m_qk.need_sync\(\)\) m_qk.sync\(\);) p n
(    }) N
(  }) N
() N
(  ) S
(int) k
( data; ) p
(// Internal data buffer used by initiator with generic payload) c n
() p n
(  mm   m_mm;                         ) S
(// Memory manager) c n
(  tlm_utils::tlm_quantumkeeper m_qk; ) p
(// Quantum keeper for temporal decoupling) c n
(};) p n
() N
() N
(// *****************************************************************************) c n
(*******) N
(// Bus model supports multiple initiators and multiple targets) N
(// Supports b_ and nb_ transport interfaces, although only b_transport is actual) N
(ly used) N
(// It does no arbitration, but routes all transactions from initiators without b) N
(locking) N
(// It uses a simple built-in routing algorithm) N
(// *****************************************************************************) N
(*******) N
() p n
(template) K
(<) p
(unsigned) k
( ) p
(int) k
( N_INITIATORS, ) p
(unsigned) k
( ) p
(int) k
( N_TARGETS>) p n
(struct) k
( Bus: sc_module) p n
({) N
(  ) S
(// Tagged sockets allow incoming transactions to be identified) c n
(  tlm_utils::simple_target_socket_tagged<Bus>*    targ_socket[N_INITIATORS];) p n
(  tlm_utils::simple_initiator_socket_tagged<Bus>* init_socket[N_TARGETS];) N
() N
(  SC_CTOR\(Bus\)) N
(  {) N
(    ) S
(for) K
( \() p
(unsigned) k
( ) p
(int) k
( i = 0; i < N_INITIATORS; i++\)) p n
(    {) N
(      ) S
(char) k
( txt[20];) p n
(      sprintf\(txt, ") S
(targ_socket_%d) str
(", i\);) p n
(      targ_socket[i] = ) S
(new) K
( tlm_utils::simple_target_socket_tagged<Bus>\(txt\);) p n
() N
(      targ_socket[i]->register_nb_transport_fw\(   ) S
(this) K
(, &Bus::nb_transport_fw, i) p n
(\);) N
(      targ_socket[i]->register_b_transport\(       ) S
(this) K
(, &Bus::b_transport, i\);) p n
(      targ_socket[i]->register_get_direct_mem_ptr\() S
(this) K
(, &Bus::get_direct_mem_ptr) p n
(, i\);) N
(      targ_socket[i]->register_transport_dbg\(     ) S
(this) K
(, &Bus::transport_dbg, i\);) p n
(    }) N
(    ) S
(for) K
( \() p
(unsigned) k
( ) p
(int) k
( i = 0; i < N_TARGETS; i++\)) p n
(    {) N
(      ) S
(char) k
( txt[20];) p n
(      sprintf\(txt, ") S
(init_socket_%d) str
(", i\);) p n
(      init_socket[i] = ) S
(new) K
( tlm_utils::simple_initiator_socket_tagged<Bus>\(txt\);) p n
() N
(      init_socket[i]->register_nb_transport_bw\(          ) S
(this) K
(, &Bus::nb_transpor) p n
(t_bw, i\);) N
(      init_socket[i]->register_invalidate_direct_mem_ptr\() S
(this) K
(, &Bus::invalidate_) p n
(direct_mem_ptr, i\);) N
(    }) N
(  }) N
(tlm2_getting_started_5.cpp) (Page 6/12) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_5.cpp) (3/6) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
(  ) S
(// Tagged non-blocking transport forward method) c n
(  ) p
(virtual) K
( tlm::tlm_sync_enum nb_transport_fw\() p
(int) k
( id,) p n
(      tlm::tlm_generic_payload& trans, tlm::tlm_phase& phase, sc_time& delay\)) N
(  {) N
(    ) S
(if) K
( \(id < N_INITIATORS\)) p n
(    {) N
(      ) S
(// Forward path) c n
(      m_id_map[ &trans ] = id;) p n
() N
(      sc_dt::uint64 address = trans.get_address\(\);) N
(      sc_dt::uint64 masked_address;) N
(      ) S
(unsigned) k
( ) p
(int) k
( target_nr = decode_address\( address, masked_address\);) p n
() N
(      ) S
(if) K
( \(target_nr < N_TARGETS\)) p n
(      {) N
(        ) S
(// Modify address within transaction) c n
(        trans.set_address\( masked_address \);) p n
() N
(        ) S
(// Forward transaction to appropriate target) c n
(        tlm::tlm_sync_enum status = \(*init_socket[target_nr]\)->nb_transport_fw\(t) p n
(rans, phase, delay\);) N
() N
(        ) S
(if) K
( \(status == tlm::TLM_COMPLETED\)) p n
(          ) S
(// Put back original address) c n
(          trans.set_address\( address \);) p n
(        ) S
(return) K
( status;) p n
(      }) N
(      ) S
(else) K n
(        ) p
(return) K
( tlm::TLM_COMPLETED;) p n
(    }) N
(    ) S
(else) K n
(    {) p n
(      SC_REPORT_FATAL\(") S
(TLM-2) str
(", ") p
(Invalid tagged socket id in bus) str
("\);) p n
(      ) S
(return) K
( tlm::TLM_COMPLETED;) p n
(    }) N
(  }) N
() N
(  ) S
(// Tagged non-blocking transport backward method) c n
(  ) p
(virtual) K
( tlm::tlm_sync_enum nb_transport_bw\() p
(int) k
( id,) p n
(      tlm::tlm_generic_payload& trans, tlm::tlm_phase& phase, sc_time& delay\)) N
(  {) N
(    ) S
(if) K
( \(id < N_TARGETS\)) p n
(    {) N
(      ) S
(// Backward path) c n
() p n
(      ) S
(// Replace original address) c n
(      sc_dt::uint64 address = trans.get_address\(\);) p n
(      trans.set_address\( compose_address\( id, address \) \);) N
() N
(      ) S
(return) K
( \( *\(targ_socket[ m_id_map[ &trans ] ]\) \)->nb_transport_bw\(trans, ph) p n
(ase, delay\);) N
(    }) N
(    ) S
(else) K n
(    {) p n
(      SC_REPORT_FATAL\(") S
(TLM-2) str
(", ") p
(Invalid tagged socket id in bus) str
("\);) p n
(      ) S
(return) K
( tlm::TLM_COMPLETED;) p n
(    }) N
(  }) N
() N
(  ) S
(// Tagged TLM-2 blocking transport method) c n
(tlm2_getting_started_5.cpp) (Page 7/12) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(virtual) K
( ) p
(void) k
( b_transport\( ) p
(int) k
( id, tlm::tlm_generic_payload& trans, sc_time& de) p n
(lay \)) N
(  {) N
(    ) S
(if) K
( \(id < N_INITIATORS\)) p n
(    {) N
(      ) S
(// Forward path) c n
(      sc_dt::uint64 address = trans.get_address\(\);) p n
(      sc_dt::uint64 masked_address;) N
(      ) S
(unsigned) k
( ) p
(int) k
( target_nr = decode_address\( address, masked_address\);) p n
() N
(      ) S
(if) K
( \(target_nr < N_TARGETS\)) p n
(      {) N
(        ) S
(// Modify address within transaction) c n
(        trans.set_address\( masked_address \);) p n
() N
(        ) S
(// Forward transaction to appropriate target) c n
(        \(*init_socket[target_nr]\)->b_transport\(trans, delay\);) p n
() N
(        ) S
(// Replace original address) c n
(        trans.set_address\( address \);) p n
(      }) N
(    }) N
(    ) S
(else) K n
(      SC_REPORT_FATAL\(") p
(TLM-2) str
(", ") p
(Invalid tagged socket id in bus) str
("\);) p n
(  }) N
() N
(  ) S
(// Tagged TLM-2 forward DMI method) c n
(  ) p
(virtual) K
( ) p
(bool) k
( get_direct_mem_ptr\() p
(int) k
( id,) p n
(                                  tlm::tlm_generic_payload& trans,) N
(                                  tlm::tlm_dmi&  dmi_data\)) N
(  {) N
(    sc_dt::uint64 masked_address;) N
(    ) S
(unsigned) k
( ) p
(int) k
( target_nr = decode_address\( trans.get_address\(\), masked_address) p n
( \);) N
(    ) S
(if) K
( \(target_nr >= N_TARGETS\)) p n
(      ) S
(return) K
( ) p
(false) k
(;) p n
() N
(    trans.set_address\( masked_address \);) N
() N
(    ) S
(bool) k
( status = \( *init_socket[target_nr] \)->get_direct_mem_ptr\( trans, dmi_da) p n
(ta \);) N
() N
(    ) S
(// Calculate DMI address of target in system address space) c n
(    dmi_data.set_start_address\( compose_address\( target_nr, dmi_data.get_start_a) p n
(ddress\(\) \)\);) N
(    dmi_data.set_end_address  \( compose_address\( target_nr, dmi_data.get_end_add) N
(ress\(\) \)\);) N
() N
(    ) S
(return) K
( status;) p n
(  }) N
() N
() N
(  ) S
(// Tagged debug transaction method) c n
(  ) p
(virtual) K
( ) p
(unsigned) k
( ) p
(int) k
( transport_dbg\() p
(int) k
( id, tlm::tlm_generic_payload& trans\)) p n
(  {) N
(    sc_dt::uint64 masked_address;) N
(    ) S
(unsigned) k
( ) p
(int) k
( target_nr = decode_address\( trans.get_address\(\), masked_address) p n
( \);) N
(    ) S
(if) K
( \(target_nr >= N_TARGETS\)) p n
(      ) S
(return) K
( 0;) p n
(    trans.set_address\( masked_address \);) N
() N
(tlm2_getting_started_5.cpp) (Page 8/12) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_5.cpp) (4/6) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(// Forward debug transaction to appropriate target) c n
(    ) p
(return) K
( \( *init_socket[target_nr] \)->transport_dbg\( trans \);) p n
(  }) N
() N
() N
(  ) S
(// Tagged backward DMI method) c n
(  ) p
(virtual) K
( ) p
(void) k
( invalidate_direct_mem_ptr\() p
(int) k
( id,) p n
(                                         sc_dt::uint64 start_range,) N
(                                         sc_dt::uint64 end_range\)) N
(  {) N
(    ) S
(// Reconstruct address range in system memory map) c n
(    sc_dt::uint64 bw_start_range = compose_address\( id, start_range \);) p n
(    sc_dt::uint64 bw_end_range   = compose_address\( id, end_range \);) N
() N
(    ) S
(// Propagate call backward to all initiators) c n
(    ) p
(for) K
( \() p
(unsigned) k
( ) p
(int) k
( i = 0; i < N_INITIATORS; i++\)) p n
(      \(*targ_socket[i]\)->invalidate_direct_mem_ptr\(bw_start_range, bw_end_range\)) N
(;) N
(  }) N
() N
(  ) S
(// Simple fixed address decoding) c n
(  ) p
(inline) K
( ) p
(unsigned) k
( ) p
(int) k
( decode_address\( sc_dt::uint64 address, sc_dt::uint64& mask) p n
(ed_address \)) N
(  {) N
(    ) S
(unsigned) k
( ) p
(int) k
( target_nr = ) p
(static_cast) k
(<) p
(unsigned) k
( ) p
(int) k
(>\( \(address >> 6\) & 0x3 \);) p n
(    masked_address = address & 0x3F;) N
(    ) S
(return) K
( target_nr;) p n
(  }) N
() N
(  ) S
(inline) K
( sc_dt::uint64 compose_address\( ) p
(unsigned) k
( ) p
(int) k
( target_nr, sc_dt::uint64 ad) p n
(dress\)) N
(  {) N
(    ) S
(return) K
( \(target_nr << 6\) | \(address & 0x3F\);) p n
(  }) N
() N
(  std::map <tlm::tlm_generic_payload*, ) S
(unsigned) k
( ) p
(int) k
(> m_id_map;) p n
(};) N
() N
() N
(// *****************************************************************************) c n
(************) N
(// Target memory implements b_transport, DMI and debug) N
(// *****************************************************************************) N
(************) N
() p n
(struct) k
( Memory: sc_module) p n
({) N
(  tlm_utils::simple_target_socket<Memory> socket;) N
() N
(  ) S
(enum) k
( { SIZE = 64 };) p n
(  ) S
(const) K
( sc_time LATENCY;) p n
() N
(  SC_CTOR\(Memory\)) N
(  : socket\(") S
(socket) str
("\), LATENCY\(10, SC_NS\)) p n
(  {) N
(    socket.register_b_transport\(       ) S
(this) K
(, &Memory::b_transport\);) p n
(    socket.register_get_direct_mem_ptr\() S
(this) K
(, &Memory::get_direct_mem_ptr\);) p n
(    socket.register_transport_dbg\(     ) S
(this) K
(, &Memory::transport_dbg\);) p n
() N
(    ) S
(// Initialize memory with random data) c n
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < SIZE; i++\)) p n
(      mem[i] = 0xAA000000 | \(mem_nr << 20\) | \(rand\(\) % 256\);) N
(tlm2_getting_started_5.cpp) (Page 9/12) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    ) S
(// Each instance is given identifiable contents to help debug) c n
(    ++mem_nr;) p n
() N
(    SC_THREAD\(invalidation_process\);) N
(  }) N
() N
(  ) S
(virtual) K
( ) p
(void) k
( b_transport\( tlm::tlm_generic_payload& trans, sc_time& delay \)) p n
(  {) N
(    tlm::tlm_command cmd = trans.get_command\(\);) N
(    sc_dt::uint64    adr = trans.get_address\(\) / 4;) N
(    ) S
(unsigned) k
( ) p
(char) k
(*   ptr = trans.get_data_ptr\(\);) p n
(    ) S
(unsigned) k
( ) p
(int) k
(     len = trans.get_data_length\(\);) p n
(    ) S
(unsigned) k
( ) p
(char) k
(*   byt = trans.get_byte_enable_ptr\(\);) p n
(    ) S
(unsigned) k
( ) p
(int) k
(     wid = trans.get_streaming_width\(\);) p n
() N
(    ) S
(if) K
( \(adr > sc_dt::uint64\(SIZE\)\) {) p n
(      trans.set_response_status\( tlm::TLM_ADDRESS_ERROR_RESPONSE \);) N
(      ) S
(return) K
(;) p n
(    }) N
(    ) S
(if) K
( \(byt != 0\) {) p n
(      trans.set_response_status\( tlm::TLM_BYTE_ENABLE_ERROR_RESPONSE \);) N
(      ) S
(return) K
(;) p n
(    }) N
(    ) S
(if) K
( \(len > 4 || wid < len\) {) p n
(      trans.set_response_status\( tlm::TLM_BURST_ERROR_RESPONSE \);) N
(      ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(if) K
( \(trans.get_command\(\) == tlm::TLM_READ_COMMAND\)) p n
(      memcpy\(ptr, &mem[adr], len\);) N
(    ) S
(else) K
( ) p
(if) K
( \(cmd == tlm::TLM_WRITE_COMMAND\)) p n
(      memcpy\(&mem[adr], ptr, len\);) N
() N
(    ) S
(// Use temporal decoupling: add memory latency to delay argument) c n
(    delay += LATENCY;) p n
() N
(    trans.set_dmi_allowed\() S
(true) k
(\);) p n
(    trans.set_response_status\( tlm::TLM_OK_RESPONSE \);) N
(  }) N
() N
() N
(  ) S
(// TLM-2 DMI method) c n
(  ) p
(virtual) K
( ) p
(bool) k
( get_direct_mem_ptr\(tlm::tlm_generic_payload& trans,) p n
(                                  tlm::tlm_dmi& dmi_data\)) N
(  {) N
(    ) S
(// Permit read and write access) c n
(    dmi_data.allow_read_write\(\);) p n
() N
(    ) S
(// Set other details of DMI region) c n
(    dmi_data.set_dmi_ptr\( ) p
(reinterpret_cast) k
(<) p
(unsigned) k
( ) p
(char) k
(*>\( &mem[0] \) \);) p n
(    dmi_data.set_start_address\( 0 \);) N
(    dmi_data.set_end_address\( SIZE*4-1 \);) N
(    dmi_data.set_read_latency\( LATENCY \);) N
(    dmi_data.set_write_latency\( LATENCY \);) N
() N
(    ) S
(return) K
( ) p
(true) k
(;) p n
(  }) N
() N
() N
(  ) S
(// TLM-2 debug transaction method) c n
(  ) p
(virtual) K
( ) p
(unsigned) k
( ) p
(int) k
( transport_dbg\(tlm::tlm_generic_payload& trans\)) p n
(tlm2_getting_started_5.cpp) (Page 10/12) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_5.cpp) (5/6) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  {) p n
(    tlm::tlm_command cmd = trans.get_command\(\);) N
(    sc_dt::uint64    adr = trans.get_address\(\) / 4;) N
(    ) S
(unsigned) k
( ) p
(char) k
(*   ptr = trans.get_data_ptr\(\);) p n
(    ) S
(unsigned) k
( ) p
(int) k
(     len = trans.get_data_length\(\);) p n
() N
(    ) S
(// Calculate the number of bytes to be actually copied) c n
(    ) p
(unsigned) k
( ) p
(int) k
( num_bytes = \(len < \(SIZE - adr\) * 4\) ? len : \(SIZE - adr\) * 4;) p n
() N
(    ) S
(if) K
( \( cmd == tlm::TLM_READ_COMMAND \)) p n
(      memcpy\(ptr, &mem[adr], num_bytes\);) N
(    ) S
(else) K
( ) p
(if) K
( \( cmd == tlm::TLM_WRITE_COMMAND \)) p n
(      memcpy\(&mem[adr], ptr, num_bytes\);) N
() N
(    ) S
(return) K
( num_bytes;) p n
(  }) N
() N
(  ) S
(void) k
( invalidation_process\(\)) p n
(  {) N
(    ) S
(// Invalidate DMI pointers once just as an example of routing a call back to) c n
( initiators) N
(    wait\(3, SC_US\);) p n
(    socket->invalidate_direct_mem_ptr\(0, SIZE-1\);) N
(  }) N
() N
(  ) S
(int) k
( mem[SIZE];) p n
(  ) S
(static) K
( ) p
(unsigned) k
( ) p
(int) k
( mem_nr;  ) p
(// Unique memory number to help debug) c n
(};) p n
() N
(unsigned) k
( ) p
(int) k
( Memory::mem_nr = 0;) p n
() N
() N
(// *****************************************************************************) c n
(************) N
(// Top-level module instantiates 2 initiators, a bus, and 4 memories) N
(// *****************************************************************************) N
(************) N
() p n
(SC_MODULE\(Top\)) N
({) N
(  Initiator1* init1;) N
(  Initiator2* init2;) N
(  Bus<2,4>*   bus;) N
(  Memory*     memory[4];) N
() N
(  SC_CTOR\(Top\)) N
(  {) N
(    init1 = ) S
(new) K
( Initiator1\(") p
(init1) str
("\);) p n
(    init2 = ) S
(new) K
( Initiator2\(") p
(init2) str
("\);) p n
(    bus   = ) S
(new) K
( Bus<2,4>  \(") p
(bus) str
("\);) p n
() N
(    init1->socket.bind\( *\(bus->targ_socket[0]\) \);) N
(    init2->socket.bind\( *\(bus->targ_socket[1]\) \);) N
() N
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < 4; i++\)) p n
(    {) N
(      ) S
(char) k
( txt[20];) p n
(      sprintf\(txt, ") S
(memory_%d) str
(", i\);) p n
(      memory[i] = ) S
(new) K
( Memory\(txt\);) p n
() N
(      \( *\(bus->init_socket[i]\) \).bind\( memory[i]->socket \);) N
(    }) N
(tlm2_getting_started_5.cpp) (Page 11/12) (23 ao\303\273t 16 15:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  }) p n
(};) N
() N
(int) k
( sc_main\( ) p
(int) k
( argc, ) p
(char) k
(* argv[]\)) p n
({) N
(    Top top\(") S
(top) str
("\);) p n
(    sc_start\(\);) N
(    ) S
(return) K
( 0;) p n
(}) N
(tlm2_getting_started_5.cpp) (Page 12/12) (23 ao\303\273t 16 15:30) title
border
grestore
(Imprim\303\251 par Daniela GENIUS) rhead
(tlm2_getting_started_5.cpp) (6/6) (lundi 12 d\303\251cembre 2016) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
